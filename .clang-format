---
# None,Cpp,Java,Javascript,ObjC,Proto,TableGen,TextProto
Language: Cpp
# LLVM,Google,Chromium,Mozilla,WebKit,Microsoft,GNU
BasedOnStyle: LLVM
# 访问说明符(public、private等)的偏移
AccessModifierOffset: -4
# 左括号(左圆括号、左尖括号、左方括号)后的对齐
# Align, DontAlign, AlwaysBreak(总是在左括号后换行)
AlignAfterOpenBracket: Align
# 对齐结构体数组
AlignArrayOfStructures: Left
# 连续赋值时，对齐所有等号
AlignConsecutiveAssignments:
  Enabled: true
  AcrossEmptyLines: false
  AcrossComments: false
  AlignCompound: true
  PadOperators: true
# 位段对齐
AlignConsecutiveBitFields:
  Enabled: true
  AcrossEmptyLines: false
  AcrossComments: false
# 连续声明时，对齐所有声明的变量名
AlignConsecutiveDeclarations:
  Enabled: true
  AcrossEmptyLines: false
  AcrossComments: false
# 连续宏定义对齐
AlignConsecutiveMacros:
  Enabled: true
  AcrossEmptyLines: false
  AcrossComments: false
# 用于在使用反斜杠换行中对齐反斜杠的选项
AlignEscapedNewlines: Left
# 水平对齐二元和三元表达式的操作数
AlignOperands: Align
# 对齐连续的尾随的注释
AlignTrailingComments:
  Kind: Always
  OverEmptyLines: 1
# 如果函数调用或带括号的初始化列表不适合全部在一行时
# 允许将所有参数放到下一行，即使BinPackArguments为false
AllowAllArgumentsOnNextLine: true
# 允许函数声明的所有参数在放在下一行
AllowAllParametersOfDeclarationOnNextLine: true
# 允许短的块放在同一行(Always 总是将短块合并成一行，Empty 只合并空块)
AllowShortBlocksOnASingleLine: Empty
# 允许短的case标签放在同一行
AllowShortCaseLabelsOnASingleLine: true
# 允许短的枚举在同一行
AllowShortEnumsOnASingleLine: true
# 允许短函数在同一行
AllowShortFunctionsOnASingleLine: Inline
# 允许短的if语句保持在同一行
AllowShortIfStatementsOnASingleLine: WithoutElse
# 允许短匿名Lambda函数在同一行
AllowShortLambdasOnASingleLine: Inline
# 允许短的循环保持在同一行
AllowShortLoopsOnASingleLine: true
# 函数声明返回类型后是否换行(None 自动，All全部，TopLevel...)
AlwaysBreakAfterReturnType: None
# 总是在多行string字面量前换行
AlwaysBreakBeforeMultilineStrings: false
# 总是在template声明后换行
AlwaysBreakTemplateDeclarations: MultiLine
# false表示函数实参要么都在同一行，要么都各自一行
BinPackArguments: false
# false表示所有形参要么都在同一行，要么都各自一行
BinPackParameters: true
# 位段列的空白风格
BitFieldColonSpacing: Both
# 大括号换行风格
BreakBeforeBraces: Custom
BraceWrapping:
  AfterCaseLabel: true
  AfterClass: true
  AfterControlStatement: Always
  AfterEnum: true
  AfterFunction: true
  AfterNamespace: true
  AfterStruct: true
  AfterUnion: true
  AfterExternBlock: true
  BeforeCatch: true
  BeforeElse: true
  BeforeLambdaBody: false
  BeforeWhile: false
  IndentBraces: false
  SplitEmptyFunction: false
  SplitEmptyRecord: false
  SplitEmptyNamespace: false
# 在二元运算符前换行
# None(在操作符后换行), NonAssignment(在非赋值的操作符前换行), All(在操作符前换行)
BreakBeforeBinaryOperators: None
# 概念声明换行规则
BreakBeforeConceptDeclarations: Never
# 三元运算操作符换行位置（?和: 在新行还是尾部）
BreakBeforeTernaryOperators: true
# 要使用的构造函数初始化式样式
BreakConstructorInitializers: BeforeComma
# 在构造函数的初始化列表的逗号前换行
BreakConstructorInitializersBeforeComma: false
# 继承链换行风格
BreakInheritanceList: BeforeComma
# 字符串常量换行
BreakStringLiterals: true
# 每行字符的限制，0表示没有限制
ColumnLimit: 100
# 如果为true，则连续的名称空间声明将在同一行上。如果为false，则在新行上声明每个名称空间。
CompactNamespaces: false
# 构造函数的初始化列表的缩进宽度
ConstructorInitializerIndentWidth: 4
# 延续的行的缩进宽度
ContinuationIndentWidth: 4
# 去除C++11的列表初始化的大括号{后和}前的空格
Cpp11BracedListStyle: true
# 继承最常用的指针和引用的对齐方式
DerivePointerAlignment: false
# 关闭格式化
DisableFormat: false
# 访问修饰符后空行
EmptyLineAfterAccessModifier: Never
# 访问修饰符前空行
EmptyLineBeforeAccessModifier: LogicalBlock
# 自动检测函数的调用和定义是否被格式为每行一个参数(Experimental)
ExperimentalAutoDetectBinPacking: false
# 如果为true，则clang格式会为短名称空间添加缺少的名称空间结尾注释，并修复无效的现有名称结束注释
FixNamespaceComments: true
# 需要被解读为foreach循环而不是函数调用的宏
ForEachMacros: [foreach, Q_FOREACH, BOOST_FOREACH]
# include块风格
IncludeBlocks: Regroup
# 对#include进行排序，匹配了某正则表达式的#include拥有对应的优先级，匹配不到的则默认优先级为INT_MAX(优先级越小排序越靠前)，
# 可以定义负数优先级从而保证某些#include永远在最前面
IncludeCategories:
  - Regex: '^"(llvm|llvm-c|clang|clang-c)/'
    Priority: 2
    SortPriority: 2
  - Regex: '^((<|")(gtest|gmock|isl|json)/)'
    Priority: 3
  - Regex: '<[[:alnum:].]+>'
    Priority: 4
  - Regex: '.*'
    Priority: 1
    SortPriority: 0
# 访问修饰符缩进
IndentAccessModifiers: false
# case块缩进
IndentCaseBlocks: true
# 缩进case标签
IndentCaseLabels: true
# Extern缩进
IndentExternBlock: AfterExternBlock
# 要使用的预处理器指令缩进样式
IndentPPDirectives: AfterHash
# 缩进宽度
IndentWidth: 4
# 函数名缩进
IndentWrappedFunctionNames: false
# 保留在块开始处的空行
KeepEmptyLinesAtTheStartOfBlocks: true
# 开始一个块的宏的正则表达式
MacroBlockBegin: ''
# 结束一个块的宏的正则表达式
MacroBlockEnd: ''
# 连续空行的最大数量
MaxEmptyLinesToKeep: 2
# 命名空间的缩进: None, Inner(缩进嵌套的命名空间中的内容), All
NamespaceIndentation: Inner
# 预处理符号缩进指定
PPIndentWidth: -1
# 打包构造器初始化列表
PackConstructorInitializers: NextLine
# 指针对齐风格
PointerAlignment: Right
# 限定符对齐
QualifierAlignment: Leave
# QualifierOrder: ['const', 'constexpr', 'static', 'type', 'inline', 'volatile']
# 引用对齐格式
ReferenceAlignment: Right
# 允许重新排版注释
ReflowComments: true
# 要求句子位置
RequiresClausePosition: WithPreceding
# require表达式缩进
RequiresExpressionIndentation: OuterScope
# 分离定义语句块
SeparateDefinitionBlocks: Always
# 对include排序
SortIncludes: CaseInsensitive
# 允许排序 using 声明顺序
SortUsingDeclarations: false
# 在C风格类型转换后添加空格
SpaceAfterCStyleCast: false
# 在逻辑非操作符(!)之后插入一个空格
SpaceAfterLogicalNot: false
# 在 template 关键字后插入一个空格
SpaceAfterTemplateKeyword: false
# 定义在什么情况下在指针限定符之前或之后放置空格
SpaceAroundPointerQualifiers: Default
# 在赋值运算符之前添加空格
SpaceBeforeAssignmentOperators: true
# case前空格
SpaceBeforeCaseColon: false
# 大括号列表空格
SpaceBeforeCpp11BracedList: false
# 构造器初始化冒号空格
SpaceBeforeCtorInitializerColon: true
# 继承冒号空格
SpaceBeforeInheritanceColon: true
# 左圆括号之前添加一个空格: Never, ControlStatements, Always
SpaceBeforeParens: ControlStatements
# 空格将在基于范围的for循环冒号之前被删除
SpaceBeforeRangeBasedForLoopColon: true
# [ 前是否添加空格（数组名和[之间，Lambdas不会受到影响）
# 连续多个 [ 只考虑第一个（嵌套数组，多维数组）
SpaceBeforeSquareBrackets: false
# 空块中的空格
SpaceInEmptyBlock: false
# 在空的圆括号中添加空格
SpaceInEmptyParentheses: false
# 在尾随的评论前添加的空格数(只适用于//)
SpacesBeforeTrailingComments: 3
# 在尖括号的<后和>前添加空格
SpacesInAngles: Never
# 转换里的空格
SpacesInCStyleCastParentheses: false
# 条件表达式里的空格
SpacesInConditionalStatement: false
# 在容器(ObjC和JavaScript的数组和字典等)字面量中添加空格
SpacesInContainerLiterals: false
# 行注释前缀空格
SpacesInLineCommentPrefix:
  Minimum: 1
  Maximum: -1
# 在圆括号的(后和)前添加空格
SpacesInParentheses: false
# 在方括号的[后和]前添加空格，lambda表达式和未指明大小的数组的声明不受影响
SpacesInSquareBrackets: false
# C++标准
Standard: Latest
# Tab宽度
TabWidth: 4
# Tab的使用
UseTab: Never
